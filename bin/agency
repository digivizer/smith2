#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

require 'pathname'

$:.unshift(Pathname.new(__FILE__).dirname.parent.join('lib').expand_path)

require 'smith'
require 'smith/daemon'
require 'smith/agent_cache'
require 'smith/acl_compiler'
require 'smith/application/agency'

module Smith
  class AgencyRunner

    include Logger

    AGENCY_NAME = 'agency'

    def initialize(opts={})
      @options = opts
      options_check

      @daemon = Daemon.new(add_vhost(AGENCY_NAME), opts[:daemon], opts[:pid_dir])

      if @daemon.running?
        msg = "An agency with pid: #{@daemon.pid} is already running"
        logger.fatal { msg}
        raise AgencyRunning, msg
      end

      @agency = Agency.new

      Smith.shutdown_hook do
        logger.info { "Shutting down" }
      end

    end

    def run
      logger.info { "Using config file: #{Smith.config_path}" }
      require 'smith/messaging/acl_type_cache'

      @daemon.daemonise

      Smith.compile_acls
      Smith.start do

        signal_handler = SelfPipe.new(self)
        # Setup signal handlers to clean up.

        %w{TERM INT QUIT}.each do |sig|
          signal_handler.install_signal_handler(sig) { @agency.stop }
        end

        # This block is here so the that the shutdown hook added in
        # Smith.start runs last. Yes I know this is leaky but that's how
        # it is at the moment.

        Smith.shutdown_hook do
          @daemon.unlink_pid_file
        end

        logger.info { "Starting #{File.basename($0)}" }
        @agency.setup_queues
        @agency.start_monitoring
      end
    end

    private

    def options_check
      if @options[:daemon] && Regexp.new(/stdout|stderr/i).match(Smith.config.logging.appender[:type])
        puts "Logger set to stdout and daemonise is true. Log messages will be sent to /dev/null."
      end
    end

    def add_vhost(name)
      suffix = Pathname.new(Smith.config.amqp.broker.vhost).basename
      "%s.%s" % [name, (suffix.to_s.empty? || suffix.root?) ? 'default' : suffix.to_s]
    end
  end
end

parser = Trollop::Parser.new do
  opt :daemon,      "daemonise", :default => false, :short => :d
  opt :pid,         "pid file", :type => :string, :short => :p
end

opts = Trollop::with_standard_exception_handling parser do
  #raise Trollop::HelpNeeded if ARGV.size < 2
  parser.parse ARGV
end

begin
  agency_runner = Smith::AgencyRunner.new(opts)
  agency_runner.run
rescue Smith::AgencyRunning => e
  puts e.message
end
