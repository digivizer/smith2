#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

%w{TERM INT QUIT}.each do |sig|
  trap sig, proc { exit }
end

require 'pathname'
$:.unshift(Pathname.new(__FILE__).dirname.parent.join('lib').expand_path)

require 'smith'
require 'smith/command'

require 'trollop'

include Smith::Logger

module Smith
  class SmithControl

    def initialize(options={})
      log_level((options[:log_level_given]) ? options[:log_level].to_sym : :warn)

      @timeout = (options[:timeout_given]) ? options[:timeout] : Smith.config.smith.timeout
      @node = options[:node]
    end

    def send_command(command, args, &blk)
      begin
        send("#{Command.command_type(command)}_command", command, args, &blk)
      rescue Smith::Command::UnknownCommandError => e
        blk.call(e.message)
      end
    end

    private

    def smithctl_command(command, args, &blk)
      Command.run(command, args, :responder => EM::Completion.new.tap { |c| c.completion(blk) })
    end

    def agency_command(command, args, &blk)
      Messaging::Sender.new(QueueDefinitions::Agency_control.call(@node)) do |sender|
        sender.on_timeout(@timeout) { |message_id| blk.call("Timeout. Is the agency still running?") }

        sender.on_reply(:auto_ack => true) do |reply_payload, r|
          blk.call(reply_payload[:response])
        end

        sender.consumer_count do |count|
          if count > 0
            sender.publish(Smith::ACL::AgencyCommand.new(:command => command, :args => args))
          else
            blk.call("Agency not running.")
          end
        end
      end
    end
  end

  parser = Trollop::Parser.new do
    version Smith::VERSION
    banner <<-EOS

Command line interface to control Smith.

Usage:
  smithctl commands
  smithctl <command> [options]
    EOS

    stop_on Command.commands
    opt :log_level, "Set the log level of smithctl only.", :short => :l, :type => :string
    opt :timeout,   "Specify the timeout when communicating with the agency.", :short => :t, :type => :integer, :default => 60
    opt :node,      "Specify the agency node to connect to.", :type => :string, :short => :none
  end

  opts = Trollop::with_standard_exception_handling parser do
    raise Trollop::HelpNeeded if ARGV.size < 1
    parser.parse(ARGV)
  end

  if ARGV.size > 0
    if ! Command.commands.include?(ARGV.first)
      puts "Unknown command: #{ARGV.first}"
      exit 1
    end
  else
    raise Trollop::HelpNeeded
  end

  command = ARGV.shift.dup
  args = ARGV.map {|a| a.dup}

  %w{TERM INT QUIT}.each do |sig|
    trap sig, proc { (Smith.running?) ? Smith.stop(true) : exit}
  end

  Smith.compile_acls

  control = SmithControl.new(opts)

  Smith.start do

    signal_handler = SelfPipe.new(self)
    # Setup signal handlers to clean up.

    %w{TERM INT QUIT}.each do |sig|
      signal_handler.install_signal_handler(sig) { Smith.stop(true) }
    end

    control.send_command(command, args) do |result|
      puts result if result && !result.empty?
      Smith.stop(true)
    end
  end
end
